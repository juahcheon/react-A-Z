{"ast":null,"code":"import { now } from '../../shared/utils.js';\nexport default function freeMode(_ref) {\n  let {\n    swiper,\n    extendParams,\n    emit,\n    once\n  } = _ref;\n  extendParams({\n    freeMode: {\n      enabled: false,\n      momentum: true,\n      momentumRatio: 1,\n      momentumBounce: true,\n      momentumBounceRatio: 1,\n      momentumVelocityRatio: 1,\n      sticky: false,\n      minimumVelocity: 0.02\n    }\n  });\n  function onTouchMove() {\n    const {\n      touchEventsData: data,\n      touches\n    } = swiper; // Velocity\n\n    if (data.velocities.length === 0) {\n      data.velocities.push({\n        position: touches[swiper.isHorizontal() ? 'startX' : 'startY'],\n        time: data.touchStartTime\n      });\n    }\n    data.velocities.push({\n      position: touches[swiper.isHorizontal() ? 'currentX' : 'currentY'],\n      time: now()\n    });\n  }\n  function onTouchEnd(_ref2) {\n    let {\n      currentPos\n    } = _ref2;\n    const {\n      params,\n      $wrapperEl,\n      rtlTranslate: rtl,\n      snapGrid,\n      touchEventsData: data\n    } = swiper; // Time diff\n\n    const touchEndTime = now();\n    const timeDiff = touchEndTime - data.touchStartTime;\n    if (currentPos < -swiper.minTranslate()) {\n      swiper.slideTo(swiper.activeIndex);\n      return;\n    }\n    if (currentPos > -swiper.maxTranslate()) {\n      if (swiper.slides.length < snapGrid.length) {\n        swiper.slideTo(snapGrid.length - 1);\n      } else {\n        swiper.slideTo(swiper.slides.length - 1);\n      }\n      return;\n    }\n    if (params.freeMode.momentum) {\n      if (data.velocities.length > 1) {\n        const lastMoveEvent = data.velocities.pop();\n        const velocityEvent = data.velocities.pop();\n        const distance = lastMoveEvent.position - velocityEvent.position;\n        const time = lastMoveEvent.time - velocityEvent.time;\n        swiper.velocity = distance / time;\n        swiper.velocity /= 2;\n        if (Math.abs(swiper.velocity) < params.freeMode.minimumVelocity) {\n          swiper.velocity = 0;\n        } // this implies that the user stopped moving a finger then released.\n        // There would be no events with distance zero, so the last event is stale.\n\n        if (time > 150 || now() - lastMoveEvent.time > 300) {\n          swiper.velocity = 0;\n        }\n      } else {\n        swiper.velocity = 0;\n      }\n      swiper.velocity *= params.freeMode.momentumVelocityRatio;\n      data.velocities.length = 0;\n      let momentumDuration = 1000 * params.freeMode.momentumRatio;\n      const momentumDistance = swiper.velocity * momentumDuration;\n      let newPosition = swiper.translate + momentumDistance;\n      if (rtl) newPosition = -newPosition;\n      let doBounce = false;\n      let afterBouncePosition;\n      const bounceAmount = Math.abs(swiper.velocity) * 20 * params.freeMode.momentumBounceRatio;\n      let needsLoopFix;\n      if (newPosition < swiper.maxTranslate()) {\n        if (params.freeMode.momentumBounce) {\n          if (newPosition + swiper.maxTranslate() < -bounceAmount) {\n            newPosition = swiper.maxTranslate() - bounceAmount;\n          }\n          afterBouncePosition = swiper.maxTranslate();\n          doBounce = true;\n          data.allowMomentumBounce = true;\n        } else {\n          newPosition = swiper.maxTranslate();\n        }\n        if (params.loop && params.centeredSlides) needsLoopFix = true;\n      } else if (newPosition > swiper.minTranslate()) {\n        if (params.freeMode.momentumBounce) {\n          if (newPosition - swiper.minTranslate() > bounceAmount) {\n            newPosition = swiper.minTranslate() + bounceAmount;\n          }\n          afterBouncePosition = swiper.minTranslate();\n          doBounce = true;\n          data.allowMomentumBounce = true;\n        } else {\n          newPosition = swiper.minTranslate();\n        }\n        if (params.loop && params.centeredSlides) needsLoopFix = true;\n      } else if (params.freeMode.sticky) {\n        let nextSlide;\n        for (let j = 0; j < snapGrid.length; j += 1) {\n          if (snapGrid[j] > -newPosition) {\n            nextSlide = j;\n            break;\n          }\n        }\n        if (Math.abs(snapGrid[nextSlide] - newPosition) < Math.abs(snapGrid[nextSlide - 1] - newPosition) || swiper.swipeDirection === 'next') {\n          newPosition = snapGrid[nextSlide];\n        } else {\n          newPosition = snapGrid[nextSlide - 1];\n        }\n        newPosition = -newPosition;\n      }\n      if (needsLoopFix) {\n        once('transitionEnd', () => {\n          swiper.loopFix();\n        });\n      } // Fix duration\n\n      if (swiper.velocity !== 0) {\n        if (rtl) {\n          momentumDuration = Math.abs((-newPosition - swiper.translate) / swiper.velocity);\n        } else {\n          momentumDuration = Math.abs((newPosition - swiper.translate) / swiper.velocity);\n        }\n        if (params.freeMode.sticky) {\n          // If freeMode.sticky is active and the user ends a swipe with a slow-velocity\n          // event, then durations can be 20+ seconds to slide one (or zero!) slides.\n          // It's easy to see this when simulating touch with mouse events. To fix this,\n          // limit single-slide swipes to the default slide duration. This also has the\n          // nice side effect of matching slide speed if the user stopped moving before\n          // lifting finger or mouse vs. moving slowly before lifting the finger/mouse.\n          // For faster swipes, also apply limits (albeit higher ones).\n          const moveDistance = Math.abs((rtl ? -newPosition : newPosition) - swiper.translate);\n          const currentSlideSize = swiper.slidesSizesGrid[swiper.activeIndex];\n          if (moveDistance < currentSlideSize) {\n            momentumDuration = params.speed;\n          } else if (moveDistance < 2 * currentSlideSize) {\n            momentumDuration = params.speed * 1.5;\n          } else {\n            momentumDuration = params.speed * 2.5;\n          }\n        }\n      } else if (params.freeMode.sticky) {\n        swiper.slideToClosest();\n        return;\n      }\n      if (params.freeMode.momentumBounce && doBounce) {\n        swiper.updateProgress(afterBouncePosition);\n        swiper.setTransition(momentumDuration);\n        swiper.setTranslate(newPosition);\n        swiper.transitionStart(true, swiper.swipeDirection);\n        swiper.animating = true;\n        $wrapperEl.transitionEnd(() => {\n          if (!swiper || swiper.destroyed || !data.allowMomentumBounce) return;\n          emit('momentumBounce');\n          swiper.setTransition(params.speed);\n          setTimeout(() => {\n            swiper.setTranslate(afterBouncePosition);\n            $wrapperEl.transitionEnd(() => {\n              if (!swiper || swiper.destroyed) return;\n              swiper.transitionEnd();\n            });\n          }, 0);\n        });\n      } else if (swiper.velocity) {\n        emit('_freeModeNoMomentumRelease');\n        swiper.updateProgress(newPosition);\n        swiper.setTransition(momentumDuration);\n        swiper.setTranslate(newPosition);\n        swiper.transitionStart(true, swiper.swipeDirection);\n        if (!swiper.animating) {\n          swiper.animating = true;\n          $wrapperEl.transitionEnd(() => {\n            if (!swiper || swiper.destroyed) return;\n            swiper.transitionEnd();\n          });\n        }\n      } else {\n        swiper.updateProgress(newPosition);\n      }\n      swiper.updateActiveIndex();\n      swiper.updateSlidesClasses();\n    } else if (params.freeMode.sticky) {\n      swiper.slideToClosest();\n      return;\n    } else if (params.freeMode) {\n      emit('_freeModeNoMomentumRelease');\n    }\n    if (!params.freeMode.momentum || timeDiff >= params.longSwipesMs) {\n      swiper.updateProgress();\n      swiper.updateActiveIndex();\n      swiper.updateSlidesClasses();\n    }\n  }\n  Object.assign(swiper, {\n    freeMode: {\n      onTouchMove,\n      onTouchEnd\n    }\n  });\n}","map":{"version":3,"names":["now","freeMode","_ref","swiper","extendParams","emit","once","enabled","momentum","momentumRatio","momentumBounce","momentumBounceRatio","momentumVelocityRatio","sticky","minimumVelocity","onTouchMove","touchEventsData","data","touches","velocities","length","push","position","isHorizontal","time","touchStartTime","onTouchEnd","_ref2","currentPos","params","$wrapperEl","rtlTranslate","rtl","snapGrid","touchEndTime","timeDiff","minTranslate","slideTo","activeIndex","maxTranslate","slides","lastMoveEvent","pop","velocityEvent","distance","velocity","Math","abs","momentumDuration","momentumDistance","newPosition","translate","doBounce","afterBouncePosition","bounceAmount","needsLoopFix","allowMomentumBounce","loop","centeredSlides","nextSlide","j","swipeDirection","loopFix","moveDistance","currentSlideSize","slidesSizesGrid","speed","slideToClosest","updateProgress","setTransition","setTranslate","transitionStart","animating","transitionEnd","destroyed","setTimeout","updateActiveIndex","updateSlidesClasses","longSwipesMs","Object","assign"],"sources":["D:/factory/sts_4181/react-A-Z/react-a_z/react-nexflix-end/node_modules/swiper/modules/free-mode/free-mode.js"],"sourcesContent":["import { now } from '../../shared/utils.js';\nexport default function freeMode({\n  swiper,\n  extendParams,\n  emit,\n  once\n}) {\n  extendParams({\n    freeMode: {\n      enabled: false,\n      momentum: true,\n      momentumRatio: 1,\n      momentumBounce: true,\n      momentumBounceRatio: 1,\n      momentumVelocityRatio: 1,\n      sticky: false,\n      minimumVelocity: 0.02\n    }\n  });\n\n  function onTouchMove() {\n    const {\n      touchEventsData: data,\n      touches\n    } = swiper; // Velocity\n\n    if (data.velocities.length === 0) {\n      data.velocities.push({\n        position: touches[swiper.isHorizontal() ? 'startX' : 'startY'],\n        time: data.touchStartTime\n      });\n    }\n\n    data.velocities.push({\n      position: touches[swiper.isHorizontal() ? 'currentX' : 'currentY'],\n      time: now()\n    });\n  }\n\n  function onTouchEnd({\n    currentPos\n  }) {\n    const {\n      params,\n      $wrapperEl,\n      rtlTranslate: rtl,\n      snapGrid,\n      touchEventsData: data\n    } = swiper; // Time diff\n\n    const touchEndTime = now();\n    const timeDiff = touchEndTime - data.touchStartTime;\n\n    if (currentPos < -swiper.minTranslate()) {\n      swiper.slideTo(swiper.activeIndex);\n      return;\n    }\n\n    if (currentPos > -swiper.maxTranslate()) {\n      if (swiper.slides.length < snapGrid.length) {\n        swiper.slideTo(snapGrid.length - 1);\n      } else {\n        swiper.slideTo(swiper.slides.length - 1);\n      }\n\n      return;\n    }\n\n    if (params.freeMode.momentum) {\n      if (data.velocities.length > 1) {\n        const lastMoveEvent = data.velocities.pop();\n        const velocityEvent = data.velocities.pop();\n        const distance = lastMoveEvent.position - velocityEvent.position;\n        const time = lastMoveEvent.time - velocityEvent.time;\n        swiper.velocity = distance / time;\n        swiper.velocity /= 2;\n\n        if (Math.abs(swiper.velocity) < params.freeMode.minimumVelocity) {\n          swiper.velocity = 0;\n        } // this implies that the user stopped moving a finger then released.\n        // There would be no events with distance zero, so the last event is stale.\n\n\n        if (time > 150 || now() - lastMoveEvent.time > 300) {\n          swiper.velocity = 0;\n        }\n      } else {\n        swiper.velocity = 0;\n      }\n\n      swiper.velocity *= params.freeMode.momentumVelocityRatio;\n      data.velocities.length = 0;\n      let momentumDuration = 1000 * params.freeMode.momentumRatio;\n      const momentumDistance = swiper.velocity * momentumDuration;\n      let newPosition = swiper.translate + momentumDistance;\n      if (rtl) newPosition = -newPosition;\n      let doBounce = false;\n      let afterBouncePosition;\n      const bounceAmount = Math.abs(swiper.velocity) * 20 * params.freeMode.momentumBounceRatio;\n      let needsLoopFix;\n\n      if (newPosition < swiper.maxTranslate()) {\n        if (params.freeMode.momentumBounce) {\n          if (newPosition + swiper.maxTranslate() < -bounceAmount) {\n            newPosition = swiper.maxTranslate() - bounceAmount;\n          }\n\n          afterBouncePosition = swiper.maxTranslate();\n          doBounce = true;\n          data.allowMomentumBounce = true;\n        } else {\n          newPosition = swiper.maxTranslate();\n        }\n\n        if (params.loop && params.centeredSlides) needsLoopFix = true;\n      } else if (newPosition > swiper.minTranslate()) {\n        if (params.freeMode.momentumBounce) {\n          if (newPosition - swiper.minTranslate() > bounceAmount) {\n            newPosition = swiper.minTranslate() + bounceAmount;\n          }\n\n          afterBouncePosition = swiper.minTranslate();\n          doBounce = true;\n          data.allowMomentumBounce = true;\n        } else {\n          newPosition = swiper.minTranslate();\n        }\n\n        if (params.loop && params.centeredSlides) needsLoopFix = true;\n      } else if (params.freeMode.sticky) {\n        let nextSlide;\n\n        for (let j = 0; j < snapGrid.length; j += 1) {\n          if (snapGrid[j] > -newPosition) {\n            nextSlide = j;\n            break;\n          }\n        }\n\n        if (Math.abs(snapGrid[nextSlide] - newPosition) < Math.abs(snapGrid[nextSlide - 1] - newPosition) || swiper.swipeDirection === 'next') {\n          newPosition = snapGrid[nextSlide];\n        } else {\n          newPosition = snapGrid[nextSlide - 1];\n        }\n\n        newPosition = -newPosition;\n      }\n\n      if (needsLoopFix) {\n        once('transitionEnd', () => {\n          swiper.loopFix();\n        });\n      } // Fix duration\n\n\n      if (swiper.velocity !== 0) {\n        if (rtl) {\n          momentumDuration = Math.abs((-newPosition - swiper.translate) / swiper.velocity);\n        } else {\n          momentumDuration = Math.abs((newPosition - swiper.translate) / swiper.velocity);\n        }\n\n        if (params.freeMode.sticky) {\n          // If freeMode.sticky is active and the user ends a swipe with a slow-velocity\n          // event, then durations can be 20+ seconds to slide one (or zero!) slides.\n          // It's easy to see this when simulating touch with mouse events. To fix this,\n          // limit single-slide swipes to the default slide duration. This also has the\n          // nice side effect of matching slide speed if the user stopped moving before\n          // lifting finger or mouse vs. moving slowly before lifting the finger/mouse.\n          // For faster swipes, also apply limits (albeit higher ones).\n          const moveDistance = Math.abs((rtl ? -newPosition : newPosition) - swiper.translate);\n          const currentSlideSize = swiper.slidesSizesGrid[swiper.activeIndex];\n\n          if (moveDistance < currentSlideSize) {\n            momentumDuration = params.speed;\n          } else if (moveDistance < 2 * currentSlideSize) {\n            momentumDuration = params.speed * 1.5;\n          } else {\n            momentumDuration = params.speed * 2.5;\n          }\n        }\n      } else if (params.freeMode.sticky) {\n        swiper.slideToClosest();\n        return;\n      }\n\n      if (params.freeMode.momentumBounce && doBounce) {\n        swiper.updateProgress(afterBouncePosition);\n        swiper.setTransition(momentumDuration);\n        swiper.setTranslate(newPosition);\n        swiper.transitionStart(true, swiper.swipeDirection);\n        swiper.animating = true;\n        $wrapperEl.transitionEnd(() => {\n          if (!swiper || swiper.destroyed || !data.allowMomentumBounce) return;\n          emit('momentumBounce');\n          swiper.setTransition(params.speed);\n          setTimeout(() => {\n            swiper.setTranslate(afterBouncePosition);\n            $wrapperEl.transitionEnd(() => {\n              if (!swiper || swiper.destroyed) return;\n              swiper.transitionEnd();\n            });\n          }, 0);\n        });\n      } else if (swiper.velocity) {\n        emit('_freeModeNoMomentumRelease');\n        swiper.updateProgress(newPosition);\n        swiper.setTransition(momentumDuration);\n        swiper.setTranslate(newPosition);\n        swiper.transitionStart(true, swiper.swipeDirection);\n\n        if (!swiper.animating) {\n          swiper.animating = true;\n          $wrapperEl.transitionEnd(() => {\n            if (!swiper || swiper.destroyed) return;\n            swiper.transitionEnd();\n          });\n        }\n      } else {\n        swiper.updateProgress(newPosition);\n      }\n\n      swiper.updateActiveIndex();\n      swiper.updateSlidesClasses();\n    } else if (params.freeMode.sticky) {\n      swiper.slideToClosest();\n      return;\n    } else if (params.freeMode) {\n      emit('_freeModeNoMomentumRelease');\n    }\n\n    if (!params.freeMode.momentum || timeDiff >= params.longSwipesMs) {\n      swiper.updateProgress();\n      swiper.updateActiveIndex();\n      swiper.updateSlidesClasses();\n    }\n  }\n\n  Object.assign(swiper, {\n    freeMode: {\n      onTouchMove,\n      onTouchEnd\n    }\n  });\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
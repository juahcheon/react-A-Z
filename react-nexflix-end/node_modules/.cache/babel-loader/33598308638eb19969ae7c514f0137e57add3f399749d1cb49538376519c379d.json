{"ast":null,"code":"var _jsxFileName = \"D:\\\\factory\\\\sts_4181\\\\react-A-Z\\\\react-a_z\\\\react-nexflix-end\\\\src\\\\components\\\\Banner.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport axios from '../api/axios';\nimport requests from '../api/requests';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Banner() {\n  _s();\n  const [movie, setMovie] = useState([]);\n  useEffect(() => {\n    fetchData();\n  }, []);\n  const fetchData = async () => {\n    // 현재 상영중인 영화 정보를 가져오기(여러 영화)\n    const request = await axios.get(requests.fetchNowPlaying);\n\n    // 여러 영화 중 영화 하나의 ID를 가져오기\n    const movieId = request.data.results[Math.floor(Math.random() * request.data.results.length)].id;\n\n    // 특정 영화의 더 상세한 정보를 가져오기(비디오 정보도 포함)\n    const results = await axios.get(`movie/${movieId}`, {\n      params: {\n        append_to_reponse: 'videos'\n      }\n    });\n    setMovie(movieDetail);\n  };\n  return /*#__PURE__*/_jsxDEV(\"header\", {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 5\n  }, this);\n}\n_s(Banner, \"jmRb9xsBKsoKCGHCjtfP3JDQESc=\");\n_c = Banner;\nvar _c;\n$RefreshReg$(_c, \"Banner\");","map":{"version":3,"names":["React","useEffect","useState","axios","requests","jsxDEV","_jsxDEV","Banner","_s","movie","setMovie","fetchData","request","get","fetchNowPlaying","movieId","data","results","Math","floor","random","length","id","params","append_to_reponse","movieDetail","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/factory/sts_4181/react-A-Z/react-a_z/react-nexflix-end/src/components/Banner.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport axios from '../api/axios';\r\nimport requests from '../api/requests';\r\n\r\nexport default function Banner() {\r\n  const [movie, setMovie] = useState([]);\r\n  useEffect(() => {\r\n    fetchData();\r\n  },[]);\r\n\r\n  const fetchData = async () => {\r\n    // 현재 상영중인 영화 정보를 가져오기(여러 영화)\r\n    const request = await axios.get(requests.fetchNowPlaying);\r\n\r\n    // 여러 영화 중 영화 하나의 ID를 가져오기\r\n    const movieId = request.data.results[\r\n      Math.floor(Math.random() * request.data.results.length)\r\n    ].id;\r\n\r\n    // 특정 영화의 더 상세한 정보를 가져오기(비디오 정보도 포함)\r\n    const results = await axios.get(`movie/${movieId}`, {\r\n      params: {append_to_reponse: 'videos'},\r\n    });\r\n    setMovie(movieDetail);\r\n  };\r\n  \r\n\r\n  return (\r\n    <header>\r\n      \r\n\r\n    </header>\r\n  );\r\n}\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,OAAOC,KAAK,MAAM,cAAc;AAChC,OAAOC,QAAQ,MAAM,iBAAiB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEvC,eAAe,SAASC,MAAMA,CAAA,EAAG;EAAAC,EAAA;EAC/B,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EACtCD,SAAS,CAAC,MAAM;IACdU,SAAS,CAAC,CAAC;EACb,CAAC,EAAC,EAAE,CAAC;EAEL,MAAMA,SAAS,GAAG,MAAAA,CAAA,KAAY;IAC5B;IACA,MAAMC,OAAO,GAAG,MAAMT,KAAK,CAACU,GAAG,CAACT,QAAQ,CAACU,eAAe,CAAC;;IAEzD;IACA,MAAMC,OAAO,GAAGH,OAAO,CAACI,IAAI,CAACC,OAAO,CAClCC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAGR,OAAO,CAACI,IAAI,CAACC,OAAO,CAACI,MAAM,CAAC,CACxD,CAACC,EAAE;;IAEJ;IACA,MAAML,OAAO,GAAG,MAAMd,KAAK,CAACU,GAAG,CAAC,SAASE,OAAO,EAAE,EAAE;MAClDQ,MAAM,EAAE;QAACC,iBAAiB,EAAE;MAAQ;IACtC,CAAC,CAAC;IACFd,QAAQ,CAACe,WAAW,CAAC;EACvB,CAAC;EAGD,oBACEnB,OAAA;IAAAoB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAGQ,CAAC;AAEb;AAACrB,EAAA,CA7BuBD,MAAM;AAAAuB,EAAA,GAANvB,MAAM;AAAA,IAAAuB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}